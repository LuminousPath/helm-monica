# Default values for Monica.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  registry: docker.io
  repository: monicahq/monicahq
  # Overrides the image tag whose default is the chart appVersion.
  tag: v2.18.0-alpine-apache
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

## Database information
## To keep this information secure, we urge you to change the default password
## Currently only "mysql" compatible servers are working
db:
  connection: mysql
  host: 127.0.0.1
  port: 3306
  database: monica
  username: homestead
  password: secret
  ## You can use mysql unix socket if available, it overrides DB_HOST and DB_PORT values.
  unix_sock:
    enable: false
    socket: /var/run/mysqld/mysqld.sock
  # prefix: ""
  ## Use utf8mb4 database charset format to support emoji characters
  ## ⚠ be sure your DBMS supports utf8mb4 format
  use_utf8MB4: true
  test:
    host: 127.0.0.1
    database: monica_test
    username: homestead
    password: secret

## Prevent information leakage by referring to IDs with hashIds instead of
## the actual IDs used in the database.
hash:
  salt: ChangeMeBy20+KeyLength
  length: 18

## Mail credentials used to send emails from the application.
mail:
  mailer: smtp
  host: mailtrap.io
  port: 2525
  # username: ""
  # password: ""
  # encryption: ""
  ## Outgoing emails will be sent with these identity
  # from_address: ""
  from_name: "Monica instance"

app:
  ## Two choices: local|production. Use local if you want to install Monica as a
  ## development version. Use production otherwise.
  environment: local
  ## true if you want to show debug information on errors. For production, put this
  ## to false.
  debug: false
  ## The encryption key. This is the most important part of the application. Keep
  ## this secure otherwise, everyone will be able to access your application.
  ## Must be 32 characters long exactly.
  ## Use `php artisan key:generate` or `pwgen -s 32 1` to generate a random key.
  key: ChangeMeBy32KeyLengthOrGenerated
  ## The URL of your application.
  url: http://localhost
  ## Force using APP_URL as base url of your application.
  ## You should not need this, unless you are using subdirectory config.
  force_url: false
  ## New registration notification sent to this email
  # email_new_users_notification: ""
  ## Ability to disable signups on your instance.
  ## Can be true or false. Default to false.
  disable_signup: true
  ## Enable user email verification.
  signup_double_opt_in: false
  ## Set trusted proxy IP addresses.
  ## To trust all proxies that connect directly to your server, use a "*".
  ## To trust one or more specific proxies that connect directly to your server,
  ## use a comma separated list of IP addresses.
  # trusted_proxies: ""
  #  Enable automatic cloudflare trusted proxy discover
  trusted_cloudflare: false

## Frequency of creation of new log files. Logs are written when an error occurs.
## Refer to config/logging.php for the possible values.
log_channel: daily
## Send a daily ping to https://version.monicahq.com to check if a new version
## is available. When a new version is detected, you will have a message in the
## UI, as well as the release notes for the new changes. Can be true or false.
## Default to true.
check_version: true
## Allow Two Factor Authentication feature on your instance
mfa_enabled: true
## Enable DAV support
dav_enabled: true
## Enable CARDDAV support
carddav_enabled: false
## Allow to access general statistics about your instance through a public API
## call
allow_statistics_through_public_api_access: false
## Indicates that each user in the instance must comply to international policies
## like CASL or GDPR
policy_compliant: true

## Cache, session, and queue parameters
## ⚠ Change this only if you know what you are doing
##. Cache: database, file, memcached, redis, dynamodb
##. Session: file, cookie, database, apc, memcached, redis, array
##. Queue: sync, database, beanstalkd, sqs, redis
##  If Queue is not set to 'sync', you'll have to set a queue worker
##  See https://laravel.com/docs/5.7/queues#running-the-queue-worker
cache:
  driver: database
  session_driver: file
  session_lifetime: 120
  queue_connection: sync
  ## If you use redis, set the redis host or ip, like:
  #redis:
  #  host: redis

defaults:
  ## Maximum allowed size for uploaded files, in kilobytes.
  ## Make sure this is an integer, without commas or spaces.
  max_upload: 10240
  ## Maximum allowed storage size per account, in megabytes.
  ## Make sure this is an integer, without commas or spaces.
  max_storage: 512
  ## Default filesystem to store uploaded files.
  ## Possible values: public|s3
  filesystem: public

## Error tracking. Specific to hosted version on .com. You probably don't need
## those.
sentry: {}
  # support: false
  # laravel_dsn: ""

## AWS keys for S3 when using this storage method
aws: {}
  # key: ""
  # secret: ""
  # region: us-east-1
  # bucket: ""
  # server: ""

## CLIENT ID and SECRET used for the official mobile application
## This is to make sure that only the mobile application that you approve can
## access the route to let your users sign in with their credentials
## Note: the official mobile application is not currently available on the stores.
mobile: {}
  # client_id: ""
  # client_secret: ""

## Enable geolocation services
## This is used to translate addresses to GPS coordinates.
## We use LocationIQ (https://locationiq.com/) to translate addresses to
## latitude/longitude coordinates. We could use Google instead but we don't
## want to give anything to Google, ever.
## LocationIQ offers 10,000 free requests per day.
geolocation: {}
  # enable: false
  # ## API key for geolocation services
  # location_iq_api_key: ""

## Enable weather on contact profile page
## Weather can only be fetched if we know longitude/latitude - this is why
## you also need to activate the geolocation service above to make it work
## Access to weather data from darksky api
## https://darksky.net/dev/register
## Darksky provides an api with 1000 free API calls per day
## You need to enable the weather above if you provide an API key here.
weather: {}
  # enable: false
  # ## API key for darksky
  # darksky_api_key: ""

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  ## Monica data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  # storageClass: "-"
  # existingClaim: "ClaimName"
  accessMode: ReadWriteOnce
  size: 8Gi

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: localhost
      paths: ["/"]
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling: {}

serviceAccount: {}

nodeSelector: {}

tolerations: []

affinity: {}
